image: ubuntu:22.04

stages:
 - format
 - build
 - test
 - package

workflow:
  rules:
    # don't create a pipeline if its a commit pipeline, on a branch and that branch has open merge requests.
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - when: always

.dependencies:
  before_script:
    - apt-get update -qq
    - export DEBIAN_FRONTEND=noninteractive && apt-get install -y -qq
      casacore-data casacore-dev casacore-tools
      cmake
      g++
      g++-12
      git
      libblas-dev liblapack-dev
      libboost-filesystem-dev libboost-system-dev libboost-date-time-dev
      libboost-program-options-dev libboost-test-dev
      libcfitsio-dev
      libfftw3-dev
      libgsl-dev
      libhdf5-dev
      libopenmpi-dev
      libpython3-dev
      pkg-config
      python3-dev python3-numpy
      python3-sphinx
      python3-pip
      wget

format:
  stage: format
  extends: .dependencies
  script:
    # Update external/aocommon, which contains format.sh.
    - git submodule update --init external/aocommon
    - apt-get install -y -qq clang-format-12
    # The formatter needs a binary named 'clang-format', not 'clang-format-12'.
    - ln -sf clang-format-12 /usr/bin/clang-format
    - pip3 install black cmake-format
    # Check formatting of header (*.h), source (*.cpp), python and CMake files.
    - ./scripts/run-format.sh
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always

build-without-everybeam:
  stage: build
  extends: .dependencies
  script:
    - pip3 install pytest astropy gcovr
    - mkdir build
    - cd build
    - cmake -DBUILD_TESTING=ON -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" ../
    - make
    - make doc
    - make install
    # For a push pipeline, run unittests only, otherwise run both unit and integration tests
    - if [[ $CI_PIPELINE_SOURCE == "push" ]] ; then make unitchecks; else make check; fi
    - gcovr --gcov-ignore-parse-errors -r .. -e '.*/tests/.*' -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' --json -o run-unit.json
    # gcovr to enable line coverage highlighting in MRs
    - gcovr --add-tracefile run-unit.json --xml > coverage.xml
    # gcovr to create badge
    - gcovr --add-tracefile run-unit.json
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

build-with-everybeam-gcc12:
  stage: build
  extends: .dependencies
  script:
    - pip3 install pytest astropy
    - mkdir -p /opt/everybeam/build && cd /opt/everybeam && git clone https://git.astron.nl/RD/EveryBeam.git
    - cd build/ && cmake -DCMAKE_INSTALL_PREFIX=.. ../EveryBeam/
    - make -j`nproc` install
    - cd $CI_PROJECT_DIR && mkdir build && cd build
    - cmake -DBUILD_TESTING=ON -DCMAKE_PREFIX_PATH='/opt/everybeam' -DCMAKE_C_COMPILER=/usr/bin/gcc-12 -DCMAKE_CXX_COMPILER=/usr/bin/g++-12 ../
    - make -j`nproc` install
    # For a push pipeline, run unittests only, otherwise run both unit and integration tests
    - if [[ $CI_PIPELINE_SOURCE == "push" ]] ; then make unitchecks; else make check; fi

.test-das6-common:
  stage: test
  needs: []
  tags:
    - das6
  before_script:
    - source scripts/das6_modules.sh
    - export OPENBLAS_NUM_THREADS=1
    - mkdir -p build && cd build
    - cmake -DBUILD_TESTING=ON -DCMAKE_CXX_FLAGS="-D_GLIBCXX_ASSERTIONS" -DCFITSIO_ROOT_DIR=$CFITSIO_ROOT -DCASACORE_ROOT_DIR=$CASACORE_ROOT -DCMAKE_INSTALL_PREFIX=. -DCMAKE_PREFIX_PATH="${IDG_ROOT};${EVERYBEAM_ROOT};${FFTW_ROOT}" ..
    - make -j`nproc`

test-nightly-das6:
  extends: .test-das6-common
  script:
    - cd $CI_PROJECT_DIR/build
    - make nightlychecks
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true

test-system-das6:
  extends: .test-das6-common
  variables:
    # Remove testing directory at end of tests
    CLEANUP_WSCLEAN_TESTS: 1
  script:
    - cd $CI_PROJECT_DIR/build
    - make longsystemchecks
    - mkdir $CI_PROJECT_DIR/reports
    - mv check_*.xml $CI_PROJECT_DIR/reports/
  artifacts:
    paths:
      - reports/check_*.xml
    reports:
      junit: reports/check_*.xml
  rules:
    # Do not run for all scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SYSTEM_TESTS == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true

package:
  stage: package
  variables:
    PACKAGE_FILE: "wsclean-${CI_COMMIT_TAG}.tar.bz2"
    PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sources/${CI_COMMIT_TAG}/wsclean-${CI_COMMIT_TAG}.tar.bz2"
  before_script:
    - apt-get update -qq
    - export DEBIAN_FRONTEND=noninteractive && apt-get install -y -qq curl git python3-pip
    - pip3 install git-archive-all
  script:
    - |
      git-archive-all --force-submodules ${PACKAGE_FILE}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${PACKAGE_FILE} ${PACKAGE_URL}
  rules:
    - if: $CI_COMMIT_TAG
